var scheduleString = "0 */5 * * * *"; // Run the script every 5 minutes, change frecuancy here or directly in "Schedules"ly.GetStatus";
let response = Shelly.getComponentStatus("wifi");
var shellyIP = "http://" + response.sta_ip;
//var shellyIP = "http://192.168.1.101"; // Change device IP!
var url = shellyIP + "/rpc/Shelly.GetStatus";

let CONFIG = {
  PUSHED_URL: 'https://api.pushed.co/1/push',
  PUSHED_APP_KEY: "jAhwjfmbbAYkZf9nDqwf",
  PUSHED_APP_SECRET: "fD6nqX5jlw9TjZwNJsjnRC1NeJApvBTzq0jA2AE3bLdgU2HFM38A8o1sorntabAE",
  PUSHED_TARGET_TYPE: "app",
  KVS_KEY: "Script-Schedule-" + JSON.stringify(Shelly.getCurrentScriptId()),
  SCHEDULE_TIMESPEC: scheduleString,
  SCHEDULE_ID: -1,
};

function registerIfNotRegistered() {

    //print("Reading from ", CONFIG.KVS_KEY);

    Shelly.call(

        "KVS.Get",

        {

            key: CONFIG.KVS_KEY,

        },

        function (result, error_code, error_message) {

            //we are not registered yet

            if (error_code !== 0) {

                installSchedule();

                return;

            }

            CONFIG.SCHEDULE_ID = result.value;

            //check if the schedule was deleted and reinstall

            Shelly.call("Schedule.List", {}, function (result) {

                let i = 0;

                for (i = 0; i < result.jobs.length; i++) {

                    if (result.jobs[i].id === CONFIG.SCHEDULE_ID) return;

                }

                installSchedule();

            });

        }

    );

}

function saveScheduleIDInKVS(scheduleId) {

    Shelly.call("KVS.Set", {

        key: CONFIG.KVS_KEY,

        value: scheduleId,

    });

}

function installSchedule() {

    Shelly.call(

        "Schedule.Create",

        {

            enable: true,

            timespec: CONFIG.SCHEDULE_TIMESPEC,

            calls: [

                {

                    method: "script.eval",

                    params: {

                        id: Shelly.getCurrentScriptId(),

                        code: "scheduledTask()",

                    },

                },

            ],

        },

        function (result) {

            //save a record that we are registered

            saveScheduleIDInKVS(result.id);

        }

    );

}

registerIfNotRegistered();

/**
 * Push notifications using Pushed service, pushed.co
 * You can pair this script with another that emits events, for example
 * readouts from a BLE sensor and push a notification to your phone
 */

function getPushedDataObject(msg) {
  if (CONFIG.PUSHED_APP_KEY === null) return null;
  if (CONFIG.PUSHED_APP_SECRET === null) return null;
  if (typeof msg === "undefined" || msg === null) return null;
  //object with keys as expected by Pushed
  let result = {
    app_key: CONFIG.PUSHED_APP_KEY,
    app_secret: CONFIG.PUSHED_APP_SECRET,
    target_type: CONFIG.PUSHED_TARGET_TYPE,
    content: msg,
  };
  return result;
}

//JS object to x-www-form-urlencoded
function prepareFormData(pushed_obj) {
  let post_body_arr = [];
  for (let i in pushed_obj) {
    post_body_arr.push(i + "=" + pushed_obj[i]);
  }
  let result = "";
  for (let a_i in post_body_arr) {
    if (result.length > 0) result += "&";
    result += post_body_arr[a_i];
  }
  return result;
}

let notificationInFlight = false;
function sendNotification(msg) {
  //bail out if we are sending at the moment, prevent spam
  if (notificationInFlight) return false;
  let pushed_data = getPushedDataObject(msg);
  if(pushed_data === null) return;
  let pushed_form_data = prepareFormData(pushed_data);
  Shelly.call(
    "HTTP.POST",
    {
      url: CONFIG.PUSHED_URL,
      content_type: "application/x-www-form-urlencoded",
      ssl_ca: "*",
      timeout: 10,
      body: pushed_form_data,
    },
    function (result, err_code, err_message) {
      if (err_code !== 0) print(err_message);
      console.log("Notification sent");
    }
  );
}

function scheduledTask() {
    Shelly.call(
        "HTTP.GET", {
            "url": url,
        },
        function (result) {
            var response = JSON.parse(result.body);
            // Check if script:1 is present and its running property is true
            var macAddress = response.sys.mac;
            if (response.hasOwnProperty('script:1') && response['script:1'].hasOwnProperty('running')) {
                var isRunning = response['script:1'].running;
                //console.log("Script:1 is running:", isRunning);
                if (!isRunning) {
                    sendNotification("Shelly device " + macAddress + " broke!. Restarting...");
                    console.log("Script on" + macAddress + "has failed, restarting device...");
                    // Wait for notification to be sent before restarting. 
                    let timerHandle = Timer.set(5000, false, function() {
                    //Shelly.call('Shelly.Reboot');
                 });
                }
            } 
        }
    );
}



scheduledTask();
