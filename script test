// Scheduler test. gets device location and time locally from system and checks the date once a day when day changes. 
// Whats new: 
/*  Url is obtained automatically, no need to edit the scripts.
    Time is read locally from device, making main script much more stable. 
    holiday list is made once a year and date is checked once a day. 
    Power consumption is measured and logged at the end of the day. 
    watchdog restarts only main script. 
// TO DO: Reset device, test power consumption with office monitor. compare measured value with aenergy.total    
    gather and send logs to production DB.
*/
//*************************************************************************************************///
////////////---------------------------------User defined variables---------------------////////////////
// Set On//Off daily schedule for the week  
var onOffTimes = {
    "Monday": [{ on: "12:45", off: "12:45" }, { on: "12:47", off: "12:48" }],
    "Tuesday": [{ on: "13:25", off: "13:29" }, { on: "13:32", off: "13:32" }],
    "Wednesday": [{ on: "12:00", off: "13:00" }, { on: "21:00", off: "22:00" }],
    "Thursday": [{ on: "08:30", off: "10:00" }, { on: "13:00", off: "23:00" }],
    "Friday": [{ on: "11:15", off: "12:00" }, { on: "23:00", off: "23:59" }],
    "Saturday": [{ on: "00:00", off: "13:00" }, { on: "21:00", off: "22:00" }],
    "Sunday": [{ on: "12:00", off: "13:00" }, { on: "21:00", off: "22:00" }]
  };
  
  var offDays = ["Sunday"]; // Days device is powered off.
  var scheduleString = "0 */5 * * * *"; // Run the script every  X minutes, change frequency here or directly in "Schedules"
  var enableLogs = true; // Enable console logs.
  
  //*************************************************************************************************///
  // Get IP Adress automatically
  let response = Shelly.getComponentStatus("wifi");
  var shellyIP = "http://" + response.sta_ip;
  var url = shellyIP + "/rpc/Shelly.GetStatus";
  
  ///----- This will register the script to be called on a schedule-----//
  let CONFIG = {
    KVS_KEY: "Script-Schedule-" + JSON.stringify(Shelly.getCurrentScriptId()),
    SCHEDULE_TIMESPEC: scheduleString,
    SCHEDULE_ID: -1,
  };
  
  function registerIfNotRegistered() {
    //print("Reading from ", CONFIG.KVS_KEY);
    Shelly.call(
        "KVS.Get",
        {
            key: CONFIG.KVS_KEY,
        },
        function (result, error_code, error_message) {
            //we are not registered yet
            if (error_code !== 0) {
                installSchedule();
                return;
            }
            CONFIG.SCHEDULE_ID = result.value;
            //check if the schedule was deleted and reinstall
            Shelly.call("Schedule.List", {}, function (result) {
                let i = 0;
                for (i = 0; i < result.jobs.length; i++) {
                    if (result.jobs[i].id === CONFIG.SCHEDULE_ID) return;
                }
                installSchedule();
            });
        }
    );
  }
  
  function saveScheduleIDInKVS(scheduleId) {
    Shelly.call("KVS.Set", {
        key: CONFIG.KVS_KEY,
        value: scheduleId,
    });
  }
  
  function installSchedule() {
    Shelly.call(
        "Schedule.Create",
        {
            enable: true,
            timespec: CONFIG.SCHEDULE_TIMESPEC,
            calls: [
                {
                    method: "script.eval",
                    params: {
                        id: Shelly.getCurrentScriptId(),
                        code: "scheduledTask()",
                    },
                },
            ],
        },
        function (result) {
            //save a record that we are registered
            saveScheduleIDInKVS(result.id);
        }
    );
  }
  
  registerIfNotRegistered();
  
  ///---------------------------------Helper functions----------------------------------------//
  let lastStatus;
  let currentTime;
  let currentCity;
  let weekDay;
  let holidayData = [];
  let holidayYear;
  let year;
  let manualControl = false;
  let isWorkingHours;
  var consumedPower = 0;
  let currentDate = "";
  let sysTime;
  let powerOn;
  
  // Function to log hours for a specific day
  function logHours(day) {
    if (day in onOffTimes) {
        if (onOffTimes[day].length === 0) {
            console.log("No hours logged for " + day + ".");
        } else {
            console.log(day + " hours:");
            onOffTimes[day].forEach(function (timeSlot, index) {
                console.log("Slot " + (index + 1) + "= " + timeSlot.on + " - " + timeSlot.off);
            });
        }
    } else {
        console.log("No hours recorded for " + day + ".");
    }
  }
  
  // Function to measure consumed power
  Shelly.addStatusHandler(function (status) {
    if (status.name === "switch" && status.id === 0) {
        lastStatus = status;
        if (status.delta.aenergy && status.delta.aenergy.by_minute && status.delta.aenergy.by_minute.length > 0) {
            consumedPower += status.delta.aenergy.by_minute[0];
        }
    }
  });
  
  // Function to get current location
  function getCurrentLocation(callback) {
    Shelly.call(
        "HTTP.GET",
        {
            url: "https://ipinfo.io/json",
        },
        function (result) {
            var data = JSON.parse(result.body);
            var currentCity = data.city;
            callback(currentCity);
        }
    );
  } 
  // Function to get current time and check if switch is on
// Function to get current time and check if switch is on
function getSysTime(callback) {
    Shelly.call(
        "HTTP.GET",
        {
            url: shellyIP + "/rpc/Shelly.GetStatus",
        },
        function (result) {
            var data = JSON.parse(result.body);
            // sysTime = data.time CHECK THIS!!! probably define systime here for better readability ...
            powerOn = data['switch:0'].output; 
            callback(sysTime, powerOn); 
        }
    );
}

  // Function to check if device button has been manually pressed (manual control outside working hours)
  function buttonManuallyPressed(callback) {
    Shelly.call(
        "HTTP.GET",
        {
            url: url,
        },
        function (result) {
            var data = JSON.parse(result.body);
            var switchSource = data["switch:0"].source;
            if (switchSource === "SHC" || switchSource === "button") {
                getCurrentDate(function (dateTime) {
                    var currentTime = sysTime;
                    var weekDay = dateTime.dayOfWeek;
                    if (onOffTimes[weekDay]) {
                        for (let i = 0; i < onOffTimes[weekDay].length; i++) {
                            if (currentTime >= onOffTimes[weekDay][i].on && currentTime <= onOffTimes[weekDay][i].off) {
                                // If it's within working hours, do not set manualControl to true
                                callback(switchSource, false);
                                return;
                            }
                        }
                    }
                    callback(switchSource, true);
                    console.log("Manual mode is active.");
                });
            } else {
                callback(switchSource, false);
            }
        }
    );
  }
  
  function getCurrentDate(callback, retryCount, retryDelay) {
    Shelly.call(
        "HTTP.GET",
        {
            url: "https://timeapi.io/api/Time/current/zone?timeZone=Europe/Vienna",
        },
        function (result) {
            if (result.body) {
                var data = JSON.parse(result.body);
                var dateTime = {
                    year: data.year,
                    month: data.month < 10 ? "0" + data.month : data.month,
                    day: data.day < 10 ? "0" + data.day : data.day,
                    time: data.time,
                    dayOfWeek: data.dayOfWeek,
                };
                callback(dateTime);
                //console.log(dateTime);
            }
        }
    );
}

  // Function to add custom user holidays
  function addHoliday(startDate, nameText, lang) {
    lang = lang || "de";
    holidayData.push({
        startDate: startDate,
        name: [{
            lang: lang,
            text: nameText,
        }],
    });
  }

  // Function to remove custom user holidays
  function removeHoliday(startDate) {
    // Iterate through holidayData to find the holiday with the given startDate
    for (let i = 0; i < holidayData.length; i++) {
        if (holidayData[i].startDate === startDate) {
            // Remove the holiday from holidayData
            holidayData.splice(i, 1);
            if (enableLogs) {
                console.log("Holiday on " + startDate + " removed.");
            }
            return; // Exit the function once the holiday is removed
        }
    }
    // If no holiday with the given startDate is found
    if (enableLogs) {
        console.log("No holiday found on " + startDate + ".");
    }
  }
  
  // Function to check holiday list + daily schedules and turn device on or off
  function handleHolidays(currentDate, isHoliday, currentCity) {
    //######################################################################################################################      
    ///////---------------------------------------- ADD MORE HOLIDAYS HERE ------------------------------------------////       
    // addHoliday("2024-05-10", "User defined holiday 1");
    // addHoliday("2024-04-26", "User defined holiday 2");
    // removeHoliday("2024-05-01"); // Remove holiday 
    //######################################################################################################################
    // Iterate through each holiday
    holidayData.forEach(function (holiday) {
        // Check if the current date matches the start date of the holiday
        if (currentDate === holiday.startDate) {
            if (enableLogs) {
                console.log(
                    "Today is a holiday in " +
                    currentCity +
                    ": " +
                    holiday.name[0].text +
                    ". Device Power off!."
                );
            }
            Shelly.call("Switch.set", { id: 0, on: false }); // Device powered Off
            isHoliday = true;
            holidayName = holiday.name[0].text;
  
            return;
        }
    });
    if (enableLogs) {
        if (isHoliday && holidayName !== "") {
            console.log("City: ", currentCity, "Day:", weekDay, "Date:", currentDate, "Time:", currentTime, "Holiday:", holidayName, "Power:", consumedPower + " Wh", "Is Active: ", powerOn);
        } else {
            console.log("City: ", currentCity, "Day:", weekDay, "Date:", currentDate, "Time:", currentTime, "Is a holiday:", isHoliday, "Power:", consumedPower + " Wh","Is Active: ", powerOn);
        }
        logHours(weekDay);
    }
  
    // If no holiday is found, check if it's an offDay
    if (!isHoliday) {
        for (let i = 0; i < offDays.length; i++) {
            if (weekDay === offDays[i]) {
                if (enableLogs) {
                    console.log(weekDay + " is registered as an off day in " + currentCity + ". Power off.");
                }
                if (!manualControl) {
                    Shelly.call("Switch.set", { id: 0, on: false }); // Device powered Off
                }
                return;
            }
        }
        // Check if it is between onTime and offTime and turn on the device
        if (onOffTimes[weekDay]) {
            for (let i = 0; i < onOffTimes[weekDay].length; i++) {
                if (currentTime >= onOffTimes[weekDay][i].on && currentTime <= onOffTimes[weekDay][i].off) {
                    if (enableLogs) {
                        console.log("It's between working hours: " + onOffTimes[weekDay][i].on + " - " + onOffTimes[weekDay][i].off);
                    }
                    Shelly.call("Switch.set", { id: 0, on: true }); // Device powered On
                    return; // Exit the loop since we found the time slot
                }
            }
        }
        if (!manualControl) {
            Shelly.call("Switch.set", { id: 0, on: false }); // Device powered Off
        }
    }
  }
  
  // Function to fetch the holiday list
function fetchHolidayList(currentCity) {
    var holidaysURL =
        "https://openholidaysapi.org/PublicHolidays?countryIsoCode=AT&languageIsoCode=DE&validFrom=" +
        year +
        "-01-01&validTo=" +
        year +
        "-12-31";

    // Check if holidayData array is already populated
    if (holidayData.length === 0 || holidayYear != year) {
        // If the holidayData array is empty or not current anymore, make a new request for the holiday list
        console.log("Getting new holiday list");
        holidayData = []; // Clear old holiday list
        // Third API request to get the start date of holidays
        Shelly.call(
            "HTTP.GET",
            {
                url: holidaysURL,
            },
            function (startDateResult) {
                var receivedHolidayData = JSON.parse(startDateResult.body);
                var isHoliday = false;
                // Append the holiday data to the existing holidayData array
                receivedHolidayData.forEach(function (holiday) {
                    holidayData.push(holiday);
                    // Extract the year from the start date of the holiday
                    holidayYear = holiday.startDate.split("-")[0];
                    //console.log("Holiday Year: ", holidayYear);
                });
                // Call function to handle holidays
                handleHolidays(currentDate, isHoliday, currentCity); // Pass currentCity to handleHolidays
            }
        );
    } else {
        // If the holidayData array is already populated, proceed to handle holidays directly
        var isHoliday = false;
        handleHolidays(currentDate, isHoliday, currentCity);
    }

    // Check if it's outside of working hours
    isWorkingHours = false;
    if (onOffTimes[weekDay]) {
        for (let i = 0; i < onOffTimes[weekDay].length; i++) {
            if (currentTime >= onOffTimes[weekDay][i].on && currentTime <= onOffTimes[weekDay][i].off) {
                isWorkingHours = true;
                break;
            }
        }
    }

    // Enable manual control outside working hours if necessary
    if (!isWorkingHours) {
        manualControl = true;
        buttonManuallyPressed(function (switchSource) {
            //console.log("Switch source:", switchSource);
        });
    } else {
        manualControl = false;
    }
}

  
  function scheduledTask() {
    // Get the current system time
    getSysTime(function (sysTime) {
        currentTime = sysTime;
        // Get the current location
        getCurrentLocation(function (currentCity) {
            // Check if the current date needs to be updated
            if (currentDate === "" || currentTime === "00:00") {
                // If currentDate is empty or the time is 00:00, update the current date
                getCurrentDate(function (dateTime) {
                    console.log("Day is over. Total consumed power: ", consumedPower + " Wh");
                    consumedPower = 0; // Day has changed or first boot, Reset power
                    weekDay = dateTime.dayOfWeek;
                    year = dateTime.year;
                    var month = dateTime.month;
                    var day = dateTime.day;
                    currentDate = year + "-" + month + "-" + day;
                    console.log("New date is being saved:", currentDate);
                    // After updating the current date, fetch the holiday list
                    fetchHolidayList(currentCity);
                });
            } else {
                // If the current date is already set, fetch the holiday list directly
                fetchHolidayList(currentCity);
            }
        });
    });
}
  
  scheduledTask();
